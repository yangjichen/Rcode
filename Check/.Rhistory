registerDoParallel(cores=i)
ti <- system.time(qs <- foreach(g = GG, .combine = rbind) %dopar% {
require("bigmemory")
x <- attach.big.matrix(xdesc)
GetDepQuantiles(g, x)
})
tb <- rbind(tb, ti)
}
tb <- tb[-1, ]
rownames(tb) <- seq(1,detectCores(), 1)
tb
qs <- qs[1:7, ]
rownames(qs) <- c("Mon", "Tues", "Wed", "Thu", "Fri", "Sat",
"Sun")
qs
ffload("./myff")
library('glmnet')
install.packages('glmnet')
library('glmnet')
library(glmnet)
install.packages('glmnet')
library(glmnet)
ls()
lm()
z = 1:12
dim(z)=c(3,4)
z = 1:12
dim(z)=c(3,4)
library(MASS)
library(mvtnorm)
n = 1000
d = 50
mu = numeric(d)
?rep
rep(1,5)
mu = rep(1,d)
?matrix
Sigma=matrix(0,n,p)
n = 1000
p = 50
mu = rep(1,d)
Sigma=matrix(0,n,p)
for (i in 1:n){
for (j in 1:p){
Sigma[i,j]=2*0.5^abs(i-j)
}
}
View(Sigma)
X=rmvnorm(n,mu,Sigma)
Sigma=T(Sigma)
Sigma==t(Sigma)
View(Sigma)
Sigma=matrix(0,p,p)
for (i in 1:n){
for (j in 1:p){
Sigma[i,j]=2*0.5^abs(i-j)
}
}
for (i in 1:p){
for (j in 1:p){
Sigma[i,j]=2*0.5^abs(i-j)
}
}
X=rmvnorm(n,mu,Sigma)
X
bet1 = cbind(rep(1,d),0.1*rep(0.1,p-20),rep(1,d))
bet1 = cbind(cbind(rep(1,d),0.1*rep(0.1,p-20))rep(1,d))
bet1 = cbind(cbind(rep(1,d),0.1*rep(0.1,p-20)),rep(1,d))
cbind(rep(1,d),0.1*rep(0.1,p-20)
)
cbind(rep(1,10),0.1*rep(0.1,p-20))
bet1 = cbind(cbind(rep(1,10),0.1*rep(0.1,p-20)),rep(1,10))
bet1
View(bet1)
rep(1,10)
bet1 = c(rep(1,10),0.1*rep(0.1,p-20),rep(1,10))
bet1
y = X**bet1
y = X%*%bet1
View(y)
rank(X)
library(MASS)
library(mvtnorm)
n = 1000
p = 50
mu = rep(1,p)
Sigma=matrix(0,p,p)
for (i in 1:p){
for (j in 1:p){
Sigma[i,j]=2*0.5^abs(i-j)
}
}
X=rmvnorm(n,mu,Sigma)
bet1 = c(rep(1,10),0.1*rep(0.1,p-20),rep(1,10))
y = X%*%bet1
rank(X)
library(Matrix)
rankMatrix(X)
?svd
s <- svd(X)
D <- diag(s$d)
s$u %*% D %*% t(s$v) #  X = U D V'
xx = s$u %*% D %*% t(s$v) #  X = U D V'
library(MASS)
library(mvtnorm)
library(Matrix)
n = 1000
p = 50
mu = rep(1,p)
Sigma=matrix(0,p,p)
for (i in 1:p){
for (j in 1:p){
Sigma[i,j]=2*0.5^abs(i-j)
}
}
X=rmvnorm(n,mu,Sigma)
bet1 = c(rep(1,10),0.1*rep(0.1,p-20),rep(1,10))
y = X%*%bet1
rankMatrix(X)
s <- svd(X)
D <- diag(s$d)
View(D)
?norm
norm(y)
sqrt(sum(y^2))
sqrt(norm(y))
sqrt(norm(y),2)
norm(y,type=2)
norm(y,type='2')
?function
()
c
vec_norm = function(x){
sqrt(sum(x^2))
}
vec_norm(y)
apply
?apply
vec_norm_square = function(x){
sum(x^2)
}
leverage = function(X){
s = svd(X)
U = diag(s$u)
leverage = apply(X,1,vec_norm_square)
return(leverage)
}
leverage_fun = function(X){
s = svd(X)
U = diag(s$u)
leverage = apply(X,1,vec_norm_square)
return(leverage)
}
leverage_fun(X)
l = leverage_fun(X)
sum(l)
x = c(1,2,3)
x^2
s$U[1,]
s$u[1,]
vec_norm_square(s$u[1,])
leverage_fun = function(X){
s = svd(X)
U = diag(s$u)
leverage = apply(U,1,vec_norm_square)
return(leverage)
}
l = leverage_fun(X)
dim(U)
dim(s$u)
leverage_fun = function(X){
s = svd(X)
U = s$u
leverage = apply(U,1,vec_norm_square)
return(leverage)
}
l = leverage_fun(X)
l
?solve
solve(X)
hat_matrix = function(X){
H = X%*%solve(t(X)%*%X)%*%t(X)
return(H)
}
H = hat_matrix(X)
View(H)
H[1,1]
H[1,1]==l[1]
l
for (i in 1:10){
H[i,i]
l[i]
}
for (i in 1:10){
print(H[i,i])
print(l[i])
}
dim(H)
min(X)
X=rmvnorm(n,mu,Sigma)
min(X)
min(l)
sum(l)
mean(l)
sd(l)
sample
?sample
sample(1:n,100,replace = TRUE,prob=rep(1/n,n))
X[sampling,]
sampling = sample(1:n,100,replace = TRUE,prob=rep(1/n,n))
X[sampling,]
sam = X[sampling,]
sam_y = y[sampling]
fit = lm(sam_y~sam_X)
sampling = sample(1:n,100,replace = TRUE,prob=rep(1/n,n))
sam_X = X[sampling, ]
sam_y = y[sampling]
fit = lm(sam_y~sam_X)
fit$coefficients
eps = rmvnorm(n,0,diag(rep(9,n)))
eps = rnorm(n,0,9)
y = X%*%bet1+eps
fit$fitted.values
View(y)
mu = rep(1,p)
Sigma=matrix(0,p,p)
for (i in 1:p){
for (j in 1:p){
Sigma[i,j]=2*0.5^abs(i-j)
}
}
X=rmvnorm(n,mu,Sigma)
bet1 = c(rep(1,10),0.1*rep(0.1,p-20),rep(1,10))
eps = rnorm(n,0,9)
y = X%*%bet1+eps
#sampling
sampling = sample(1:n,100,replace = TRUE,prob=rep(1/n,n))
sam_X = X[sampling, ]
sam_y = y[sampling]
fit = lm(sam_y~sam_X)
fit$fitted.values
sam_y
sam_y-fit$fitted.values
log(var(fit$fitted.values))
sampling = sample(1:n,500,replace = TRUE,prob=rep(1/n,n))
sam_X = X[sampling, ]
sam_y = y[sampling]
fit = lm(sam_y~sam_X)
fit$fitted.values
log(var(fit$fitted.values))
rep(1/n,n)
sam_y = y[sampling]
summary(fit)
fit$coefficients
var(fit$coefficients)
sam_y-fit$fitted.values
a = sam_y-fit$fitted.values
b = fit$residuals
?predict
predict(fit,X)
as.data.frame(X)
predict(fit,as.data.frame(X))
fit$coefficients
sampling = sample(1:n,1000,replace = TRUE,prob=rep(1/n,n))
sam_X = X[sampling, ]
sam_y = y[sampling]
fit = lm(sam_y~sam_X)
fit$coefficients
fit = lm(y~X)
fit$coefficients
rootpath = '/Users/yangjichen/Desktop/6.7/btcdataA/'
date = '20180615'  #20xx
exchange = c('ba','hbp','okexf')  #ba
curr = c('usd','btc')     #btc
path = paste(rootpath,date,sep = '')
path = paste(path,exchange,sep='/')
filename = paste(curr,date,sep ='_')
filename = paste(filename,'.csv',sep ='')
i = path[1]
files = list.files(path=i, pattern="*.csv")
exch = strsplit(i,'/')[[1]][8]
j = 'usd_20180615.csv'
j = 'btc_20180615.csv'
trades = read.csv(paste(i, j, sep = '/'))
strsplit(i,'_')
strsplit(j,'_')
strsplit(j,'_')[[1]][1]
currency = strsplit(j,'_')[[1]][1]
if (currency =='btc'){
pairs = c('btc_eth','btc_ltc','btc_etc','btc_bch','btc_eos','btc_dash','btc_xmr','btc_zec')
}else if(currency =='usd'){
pairs = c('usd_btc','usd_eth','usd_ltc','usd_etc','usd_bch','usd_eos','usd_dash','usd_xmr','usd_zec')
}
View(trades)
source('conf.R')
deltaTcheck = function(newdata,pair,exch){
deltaT = newdata$timestamp-newdata$tlastMsg
num1 = sum(deltaT < 0)
num2 = sum(deltaT > 60)
if (num1==0 & num2==0){
return(TRUE)
}else{
print(paste(exch,pair, '#(deltaT)<0 =',num1))
print(paste(exch,pair, '#(deltaT)>60 =',num2))
return(FALSE)
}
}
NAcheck = function(newdata,pair){
if(sum(is.na(newdata$bid))>0){
print(paste('NA:',exch, pair,'have NA'))
return(FALSE)
}else{return(TRUE)}
}
for (i in path){
files = list.files(path=i, pattern="*.csv")
exch = strsplit(i,'/')[[1]][8]
for (j in filename){
if (j %in% files){
trades = read.csv(paste(i, j, sep = '/'))
currency = strsplit(j,'_')[[1]][1]
if (currency =='btc'){
pairs = c('btc_eth','btc_ltc','btc_etc','btc_bch','btc_eos','btc_dash','btc_xmr','btc_zec')
}else if(currency =='usd'){
pairs = c('usd_btc','usd_eth','usd_ltc','usd_etc','usd_bch','usd_eos','usd_dash','usd_xmr','usd_zec')
}
for (k in pairs){
if(k %in% names(summary(trades$pair))){
indx = (trades$pair == k)
newdata = trades[indx, ]
rest1 = deltaTcheck(newdata,k,exch)
rest2 = NAcheck(newdata,k)
if(rest1&rest2){
print(paste('Pair:',exch,k,'is normal'))}
}      else{
print(paste('Pair:',exch,k,'is missing'))
}
}
}else{print(paste('csvData:',exch,j,'is missing'))}
}
}
source('conf.R')
getwd()
setwd('/Users/yangjichen/Desktop/6.7/summary_tools/Check')
source('conf.R')
deltaTcheck = function(newdata,pair,exch){
deltaT = newdata$timestamp-newdata$tlastMsg
num1 = sum(deltaT < 0)
num2 = sum(deltaT > 60)
if (num1==0 & num2==0){
return(TRUE)
}else{
print(paste(exch,pair, '#(deltaT)<0 =',num1))
print(paste(exch,pair, '#(deltaT)>60 =',num2))
return(FALSE)
}
}
NAcheck = function(newdata,pair){
if(sum(is.na(newdata$bid))>0){
print(paste('NA:',exch, pair,'have NA'))
return(FALSE)
}else{return(TRUE)}
}
for (i in path){
files = list.files(path=i, pattern="*.csv")
exch = strsplit(i,'/')[[1]][8]
for (j in filename){
if (j %in% files){
trades = read.csv(paste(i, j, sep = '/'))
currency = strsplit(j,'_')[[1]][1]
if (currency =='btc'){
pairs = c('btc_eth','btc_ltc','btc_etc','btc_bch','btc_eos','btc_dash','btc_xmr','btc_zec')
}else if(currency =='usd'){
pairs = c('usd_btc','usd_eth','usd_ltc','usd_etc','usd_bch','usd_eos','usd_dash','usd_xmr','usd_zec')
}
for (k in pairs){
if(k %in% names(summary(trades$pair))){
indx = (trades$pair == k)
newdata = trades[indx, ]
rest1 = deltaTcheck(newdata,k,exch)
rest2 = NAcheck(newdata,k)
if(rest1&rest2){
print(paste('Pair:',exch,k,'is normal'))}
}      else{
print(paste('Pair:',exch,k,'is missing'))
}
}
}else{print(paste('csvData:',exch,j,'is missing'))}
}
}
i = path[1]
i
files = list.files(path=i, pattern="*.csv")
exch = strsplit(i,'/')[[1]][8]
j = filename[1]
j
if (j %in% files){
trades = read.csv(paste(i, j, sep = '/'))
currency = strsplit(j,'_')[[1]][1]
if (currency =='btc'){
pairs = c('btc_eth','btc_ltc','btc_etc','btc_bch','btc_eos','btc_dash','btc_xmr','btc_zec')
}else if(currency =='usd'){
pairs = c('usd_btc','usd_eth','usd_ltc','usd_etc','usd_bch','usd_eos','usd_dash','usd_xmr','usd_zec')
}
for (k in pairs){
if(k %in% names(summary(trades$pair))){
indx = (trades$pair == k)
newdata = trades[indx, ]
rest1 = deltaTcheck(newdata,k,exch)
rest2 = NAcheck(newdata,k)
if(rest1&rest2){
print(paste('Pair:',exch,k,'is normal'))}
}      else{
print(paste('Pair:',exch,k,'is missing'))
}
}
}else{print(paste('csvData:',exch,j,'is missing'))}
paste(i, j, sep = '/')
source('conf.R')
deltaTcheck = function(newdata,pair,exch){
deltaT = newdata$timestamp-newdata$tlastMsg
num1 = sum(deltaT < 0)
num2 = sum(deltaT > 60)
if (num1==0 & num2==0){
return(TRUE)
}else{
print(paste(exch,pair, '#(deltaT)<0 =',num1))
print(paste(exch,pair, '#(deltaT)>60 =',num2))
return(FALSE)
}
}
NAcheck = function(newdata,pair){
if(sum(is.na(newdata$bid))>0){
print(paste('NA:',exch, pair,'have NA'))
return(FALSE)
}else{return(TRUE)}
}
for (i in path){
files = list.files(path=i, pattern="*.csv")
exch = strsplit(i,'/')[[1]][8]
for (j in filename){
if (j %in% files){
trades = read.csv(paste(i, j, sep = '/'))
currency = strsplit(j,'_')[[1]][1]
if (currency =='btc'){
pairs = c('btc_eth','btc_ltc','btc_etc','btc_bch','btc_eos','btc_dash','btc_xmr','btc_zec')
}else if(currency =='usd'){
pairs = c('usd_btc','usd_eth','usd_ltc','usd_etc','usd_bch','usd_eos','usd_dash','usd_xmr','usd_zec')
}
for (k in pairs){
if(k %in% names(summary(trades$pair))){
indx = (trades$pair == k)
newdata = trades[indx, ]
rest1 = deltaTcheck(newdata,k,exch)
rest2 = NAcheck(newdata,k)
if(rest1&rest2){
print(paste('Pair:',exch,k,'is normal'))}
}      else{
print(paste('Pair:',exch,k,'is missing'))
}
}
}else{print(paste('csvData:',exch,j,'is missing'))}
}
}
source('conf.R')
deltaTcheck = function(newdata,pair,exch){
deltaT = newdata$timestamp-newdata$tlastMsg
num1 = sum(deltaT < 0)
num2 = sum(deltaT > 60)
if (num1==0 & num2==0){
return(TRUE)
}else{
print(paste(exch,pair, '#(deltaT)<0 =',num1))
print(paste(exch,pair, '#(deltaT)>60 =',num2))
return(FALSE)
}
}
NAcheck = function(newdata,pair){
if(sum(is.na(newdata$bid))>0){
print(paste('NA:',exch, pair,'have NA'))
return(FALSE)
}else{return(TRUE)}
}
Datacheck = function(path,filename){
for (i in path){
files = list.files(path=i, pattern="*.csv")
exch = strsplit(i,'/')[[1]][8]
for (j in filename){
if (j %in% files){
trades = read.csv(paste(i, j, sep = '/'))
currency = strsplit(j,'_')[[1]][1]
if (currency =='btc'){
pairs = c('btc_eth','btc_ltc','btc_etc','btc_bch','btc_eos','btc_dash','btc_xmr','btc_zec')
}else if(currency =='usd'){
pairs = c('usd_btc','usd_eth','usd_ltc','usd_etc','usd_bch','usd_eos','usd_dash','usd_xmr','usd_zec')
}
for (k in pairs){
if(k %in% names(summary(trades$pair))){
indx = (trades$pair == k)
newdata = trades[indx, ]
rest1 = deltaTcheck(newdata,k,exch)
rest2 = NAcheck(newdata,k)
if(rest1&rest2){
print(paste('Pair:',exch,k,'is normal'))}
}      else{
print(paste('Pair:',exch,k,'is missing'))
}
}
}else{print(paste('csvData:',exch,j,'is missing'))}
}
}
}
Datacheck(path,filename)
